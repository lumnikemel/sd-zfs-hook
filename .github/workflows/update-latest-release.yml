name: Update Latest Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      source_release:
        description: 'Source release tag (leave empty for latest)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  update-latest:
    runs-on: ubuntu-latest
    container:
      image: archlinux:base-devel
    steps:
      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm curl jq pacman-contrib

      # Determine which release to use
      - name: Determine source release
        id: source
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Triggered by release event
            SOURCE_TAG="${{ github.event.release.tag_name }}"
            echo "Using release event tag: $SOURCE_TAG"
          elif [ -n "${{ github.event.inputs.source_release }}" ]; then
            # Manual trigger with specific release
            SOURCE_TAG="${{ github.event.inputs.source_release }}"
            echo "Using manual input tag: $SOURCE_TAG"
          else
            # Manual trigger, find latest release (excluding 'latest' tag)
            echo "Finding latest release..."
            SOURCE_TAG=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases" | \
              jq -r '[.[] | select(.tag_name != "latest") | select(.draft == false)] | sort_by(.created_at) | reverse | .[0].tag_name')
            
            if [ "$SOURCE_TAG" = "null" ] || [ -z "$SOURCE_TAG" ]; then
              echo "::error::No suitable release found"
              exit 1
            fi
            echo "Using latest release: $SOURCE_TAG"
          fi
          
          echo "source_tag=$SOURCE_TAG" >> $GITHUB_OUTPUT

      # Skip if this is already the latest release
      - name: Check if this is latest release
        if: steps.source.outputs.source_tag == 'latest'
        run: |
          echo "Source is already the latest release, skipping"
          exit 0

      - name: Delete existing latest tag/release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          tag_name: latest
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Download and recreate repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE_TAG: ${{ steps.source.outputs.source_tag }}
        run: |
          echo "Working with source release: $SOURCE_TAG"
          
          # Create repo directory
          mkdir -p repo-latest
          
          # Get release information
          echo "Fetching release information..."
          RELEASE_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$SOURCE_TAG")
          
          if [ "$(echo "$RELEASE_DATA" | jq -r '.message // empty')" ]; then
            echo "::error::Failed to fetch release $SOURCE_TAG: $(echo "$RELEASE_DATA" | jq -r '.message')"
            exit 1
          fi
          
          # List all assets for debugging
          echo "Available assets:"
          echo "$RELEASE_DATA" | jq -r '.assets[].name'
          
          # Download sd-zfs-hook-latest.pkg.tar.zst (this should always exist)
          echo "Downloading sd-zfs-hook-latest.pkg.tar.zst..."
          LATEST_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name == "sd-zfs-hook-latest.pkg.tar.zst") | .browser_download_url')
          
          if [ "$LATEST_URL" = "null" ] || [ -z "$LATEST_URL" ]; then
            echo "::error::sd-zfs-hook-latest.pkg.tar.zst not found in release $SOURCE_TAG"
            exit 1
          fi
          
          curl -L -o repo-latest/sd-zfs-hook-latest.pkg.tar.zst "$LATEST_URL"
          
          # Try to download the versioned package as well
          echo "Looking for versioned package..."
          VERSIONED_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | test("^sd-zfs-hook-[0-9].*\\.pkg\\.tar\\.zst$")) | .browser_download_url' | head -1)
          
          if [ "$VERSIONED_URL" != "null" ] && [ -n "$VERSIONED_URL" ]; then
            VERSIONED_NAME=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | test("^sd-zfs-hook-[0-9].*\\.pkg\\.tar\\.zst$")) | .name' | head -1)
            echo "Downloading versioned package: $VERSIONED_NAME"
            curl -L -o "repo-latest/$VERSIONED_NAME" "$VERSIONED_URL"
          else
            echo "No versioned package found, using only latest"
          fi
          
          # Download existing repository files if they exist
          echo "Checking for existing repository database files..."
          DB_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name == "sdzfshook.db.tar.xz") | .browser_download_url')
          FILES_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name == "sdzfshook.files.tar.xz") | .browser_download_url')
          
          # Create repository database (this will recreate it properly)
          echo "Creating repository database..."
          cd repo-latest
          repo-add sdzfshook.db.tar.xz *.pkg.tar.zst
          
          # Create convenience symlinks
          ln -sf sdzfshook.db.tar.xz sdzfshook.db
          ln -sf sdzfshook.files.tar.xz sdzfshook.files
          
          # List files for verification
          echo "Repository contents:"
          ls -la

      - name: Create Latest Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: repo-latest/*
          tag_name: latest
          name: Latest Release
          body: |
            This is always the latest release of sd-zfs-hook
            Current version: ${{ steps.source.outputs.source_tag }}
            
            ## How to use this repository:
            
            Add to `/etc/pacman.conf`:
            ```
            [sdzfshook]
            Server = https://github.com/${{ github.repository }}/releases/download/latest
            ```
            
            Then run:
            ```bash
            sudo pacman -Sy
            sudo pacman -S sd-zfs-hook
            ```
            
            ## Available packages:
            - `sd-zfs-hook` - mkinitcpio hook for ZFS root with systemd
          draft: false
          prerelease: false
