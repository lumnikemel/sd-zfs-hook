name: Sync Files from archlinuxcn
on:
  schedule:
    - cron: '0 */6 * * *'  # Check every 6 hours
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write

jobs:
  sync-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Sync Files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

          # Function to get file content and SHA from GitHub API
          fetch_github_file() {
            local owner=$1
            local repo=$2
            local path=$3
            local branch=$4
            
            response=$(curl -sL -H "Accept: application/vnd.github.v3+json" \
                           -H "Authorization: token $GITHUB_TOKEN" \
                           "https://api.github.com/repos/$owner/$repo/contents/$path?ref=$branch")
            
            if [[ $(echo "$response" | jq -r 'type') != "object" ]] || [[ $(echo "$response" | jq 'has("message")') == "true" ]]; then
              echo "Error fetching $path from $owner/$repo" >&2
              echo "{}"
              return 1
            fi
            
            echo "$response"
          }

          # Function to update local file if different
          update_file() {
            local content=$1
            local local_path=$2
            
            # Create directory if it doesn't exist
            mkdir -p "$(dirname "$local_path")"
            
            # Decode and save content
            echo "$content" | base64 -d > "$local_path"
            
            # Add to git if changed
            if git diff --quiet "$local_path"; then
              return 1  # No changes
            else
              git add "$local_path"
              return 0  # File changed
            fi
          }

          # Define file mappings - format: "source_path::target_path"
          files=(
            "archlinuxcn/zfs-linux-lts-poscat/parse-cmdline::src/parse-cmdline"
            "archlinuxcn/zfs-linux-lts-poscat/sd-zfs.initcpio.install::src/sd-zfs.initcpio.install"
            "archlinuxcn/zfs-linux-lts-poscat/zfs-root-generator::src/zfs-root-generator"
            "archlinuxcn/zfs-linux-lts-poscat/zfs-set-env::src/zfs-set-env"
          )

          changes=0
          errors=0

          # Process each file
          for mapping in "${files[@]}"; do
            source_path=${mapping%%::*}
            target_path=${mapping#*::}
            
            echo "Processing $source_path -> $target_path"
            
            # Fetch file from archlinuxcn/repo
            response=$(fetch_github_file "archlinuxcn" "repo" "$source_path" "master")
            
            if [[ $(echo "$response" | jq -r 'type') == "object" ]]; then
              content=$(echo "$response" | jq -r '.content')
              
              if [[ -n "$content" && "$content" != "null" ]]; then
                if update_file "$content" "$target_path"; then
                  echo "Updated $target_path"
                  ((changes++))
                else
                  echo "No changes needed for $target_path"
                fi
              else
                echo "Error: Invalid content for $source_path"
                ((errors++))
              fi
            else
              echo "Error: Failed to fetch $source_path"
              ((errors++))
            fi
          done

          # Commit and push if there are changes and no errors
          if ((changes > 0)) && ((errors == 0)); then
            git commit -m "chore: sync files from archlinuxcn/repo

            Synced ${changes} file(s) from archlinuxcn/repo
            Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            
            git push
            echo "Successfully synced ${changes} file(s)"
          elif ((errors > 0)); then
            echo "::error::Encountered ${errors} error(s) during sync"
            exit 1
          else
            echo "No changes needed"
          fi
